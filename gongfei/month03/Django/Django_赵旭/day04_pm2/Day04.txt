1.模型 - Models
	1.CRUD
		1.增加数据 - Create
			1.Entry.objects.create(属性=值,属性=值)
				返回值:创建好的实体对象
			2.创建一个Entry对象并通过save()进行保存
				obj = Entry(属性=值,属性=值)
				obj.属性 = 值
				obj.save()

				无返回值，保存成功后，obj会被重新赋值
			3.创建一个Entry对象并通过save()进行保存
				允许通过字典作为Entry的参数构建对象
				dic = {
					"属性1":"值1",
					"属性2":"值2",
				}

				obj = Entry(**dic)
				obj.save()
			练习：
				使用以上三种插入数据的方式分别向
				publisher,book 实体类中增加3条数据 
		2.查询数据 - Retrieve
			所有的查询操作都要基于Entry.objects 进行调用
			Entry.objects的类型:django.db.models.manager.Manager

			1.查询能够返回查询结果集(QuerySets)
				1.基本查询操作
					方法:all()
					用法:Entry.objects.all()
					返回:QuerySets
				2.查询返回指定列
					方法:values() | values("列1","列2")
					用法:Entry.objects.values()
					返回:QuerySets
				3.查询返回指定列
					方法:values_list() | values_list("列")
				4.根据条件查询部分行数据
					方法:filter(条件1,条件2)
					用法:Entry.objects.filter(条件1,条件2)
					返回:QuerySet
					注意:
						多条件使用 , 隔开,查询的时候使用 and 进行查询
					示例:
						1.查询id=1的Author的信息
							Author.objects.filter(id=1)
						2.查询id=1并且name='小泽Maria'的Author的信息
							Author.objects.filter(id=1,name='小泽Maria')
					查询谓词:
						Django的ORM在执行非等值查询时，要使用查询谓词(Filed Lookup)
						语法: Entry.objects.filter(属性__查询谓词=值)
						常用查询谓词:
							1. exact : 等值查询
							2. contains : 模糊查询-包含 like '%xx%'
							3. in : 模糊查询 - 范围 in('','','')
							4. gt
							5. gte
							6. lt
							7. lte
							8. startswith : 模糊查询
								以 ... 开始 - like "x%"
							9. endswith
							10.range : 模糊查询 - between and
							11.date : 获取年份
							12.year
							13.month
							14.day
							15.week
							16.week_day
							17.time
							18.hour
							19.minute
							20.second
							21.regex : 根据指定的正则表达式匹配数据

							练习:
								1.查询出age大于等于30的所有的Author
								2.查询出所有姓王的Author
								3.查询出Email中包含 ao 的所有Author
								4.查询出书籍的出版时间在1990~2000年之间的图书信息
								5.查询出Author中年龄大于吕泽Maria年龄的Author的信息
				5.对条件取反
					方法:exclude(条件)
					用法:Entry.objects.exclude(条件)
					返回:QuerySet
				6.排序
					方法:order_by()
					用法:Entry.object.order_by("列1","-列2")
						默认是升序排序，如果想使用降序的话则在列前添加 - 即可
					返回:QuerySet
				
			2.查询不返回查询结果集
				1.查询只返回一条数据
					方法:get(条件)
					用法:Entry.objects.get(条件)
					返回:单个实体对象
					注意:
						该方法只适用于只能返回一条数据的场合
						查询多余一条数据或没有数据的话直接抛异常
				2.获取查询结果的数量
					方法:count()
					用法:Entry.objects.返回查询结果集方法().count()

			3.聚合查询
				1.基本聚合(不带分组)
					方法:aggregate()
					用法:Entry.objects.aggregate(名=聚合函数('列'),...)
					聚合函数的使用:
						from django.db.models import 聚合函数
							1.Avg()
							2.Count()
							3.Sum()
							4.Max()
							5.Min()
				2.聚合查询(带分组)
					方法:annotate()
					用法:
						Entry.objects
							.values('分组列1','分组列2') -- group by
							.annotate(名=聚合函数('列'),..) --聚合函数
							.values('查询列1','查询列2') -- select 查询列1,查询列2
					
						数据筛选：
							Entry.objects
								.filter(条件)  -- where
								.values('分组列') -- group by
								.annotate(名=聚合函数()) -- select 聚合
								.filter(分组后筛选条件) -- having
						练习：
							查询 Book 实体中 每个时间 所发布的图书的数量
							result = Book.objects
								.values('publicate_date')
								.annotate(count=Count('*'))

			练习:
				1. /10-queryall
					1.查询 Author中所有isActive为True的数据，并显示在模板上
					2.模板 - 10-queryall.html
		3.修改数据 - Update
			1.修改单个实体
				1.查
					通过查询方法得到要修改的实体
				2.改
					通过对象修改属性值
				3.保存
					通过 save() 保存数据回数据库

				ex:
					将 id为1的 Author的信息年龄修改为 50
					au = Author.objects.get(id=1)
					au.age = 50
					au.save()
			2.批量修改
				调用查询结果集的 update() 实现批量修改
				# 修改Author实体中所有人的isActive的值为True
				Author.objects.all().update(isActive=True)
		4.删除数据 - Delete
			调用实体对象/QuerySet的delete()实现删除
			1.删除单个对象
				Author.objects.get(id=1).delete()
			2.批量删除
				Author.objects.filter(isActive=False).delete()

			练习：
				1.点击删除时，跳转到 /12-delete/id
				2.在 /12-delete 的视图中将指定id人的isActive改为False
				3.修改完后，再重定向回 /10-queryall
					from django.shortcuts import redirect
					return redirect('地址')
	2.F查询 和 Q查询
		1.F查询 - F()
			1.作用
				在执行操作的过程中获取某列的值
			2.语法
				from django.db.models import F
				F('列名')
			3.示例
				更新Author表中所有的数据age都加10岁
				Author.objects.all().update(age=F('age')+10)
		2.Q查询 - Q()
			1.作用
				在查询条件中执行or的操作
			2.语法
				from django.db.models import Q
				Q(条件1)|Q(条件2)
			3.示例
				查询Author实体中id=1或者年龄大于45岁的信息
				Author.objects.filter(Q(id=1)|Q(age__gt=45))
2.使用后台管理Models
	1.后台的配置
		登录地址: http://127.0.0.1:8000/admin

		使用指令创建后台管理员:
			./manage.py createsuperuser
	2.基本管理
		1.在应用中的admin.py中注册要管理的实体类
			1.admin.py
				作用:注册要管理的实体类
			2.注册Models
				admin.py 中
					from django.contrib import admin
					from .models import *

					admin.site.register(Entry)
		2.定义Models的展现形式
			1.重写实体类__str__,定义后台展现名称
				class Author(models.Model):
					xxxx xxxx
					def __str__(self):
						return self.name
			2.通过 verbose_name 字段选项，修改属性名
				class Author(models.Model):
					name = models.CharField(
						max_length = 30,
						verbose_name = "姓名"
					)
			3.通过 Meta 内部类 修改展现形式
				class Author(models.Model):
					xxxx xxxx
					class Meta:
						1.db_table
							指定当前实体类映射到的表名
							(设置完成后马上同步回数据库)
						2.verbose_name
							定义实体类在admin中的显示名称(单数)
						3.verbose_name_plural
							定义实体类在admin中的显示名称(复数)

			任务:
				1.修改Publisher后台
					1.更改表名为 publisher
					2.更改后台的展示名称为 出版社
					3.更改每个属性所对应的中文名
				2.修改Book后台
					1.更改表名为book
					2.更改后台的展示名称为 书籍
					3.更改每个属性所对应的中文名
	3.高级管理


select * from index_author where not(id=1)

update index_author set age = age + 10 
Author.objects.all().update(age = age + 10 )



