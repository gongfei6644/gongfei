回顾：
	1.Flask是基于python并且依赖jinja2模板引擎的框架。
	2.注册路由：客户端与Flask程序交互
		1）用户在浏览器输入请求地址->request
		2）Flask程序接收请求，分析请求地址
		3）找到对应视图函数，执行相关操作，提供响应数据
			response给浏览器
		4）浏览器解析给用户显示
---------------------------------

一、模板
	1.模板是一种“Python+html”的网页结构，允许在HTML文件中定义变量，定义流程控制。使用模板可以使视图函数专注于处理业务逻辑，将页面渲染交由模板控制
	2.使用
		1）导入 render_template
		2）在视图函数中使用render_template("模板文件")，生成模板字符串，交由浏览器解析
		3）所有的模板文件必须存在名为"templates"的文件下
	3.变量代码块
		1）模板中使用变量，语法{{ 变量名(key) }}
		2）从视图函数中获取相关的变量，传递到模板文件中。
			return render_template("模板文件",key1=value1,key2=value2)
			函数中可以传递若干键值对，其中的key名就是在模板文件中使用的变量名
		3）使用locals()返回字典，包含所有局部变量
				params = locals()
				{
					'tup': ('ZX', 'DB'), 
					'name': '老Ｑ', 
					'dic': {'age': 30, 'name': 'Maria'}, 'list': ['保健', '唱Ｋ'], 
					'age': 30
				}
		4）过滤器
			允许模板中的变量在输出之前修改成其他的值，修改显示
			分类：
				upper	转大写字母
				lower	转小写字母
				title	首字母大写
				first	获取列表中第一个
				last	获取最后一个
				length	获取列表长度
				default() 如果变量未赋值，可采用默认值
				trim	去掉字符串两端的空格
				...
			语法：
				{{ 变量|过滤器1|过滤器2 }}
	4.控制代码块
		在模板文件中书写条件语句和循环语句，使用:
		{%  %}
		1）if语句
			基本：
				{% if 条件 %}
					条件成立时执行，允许书写静态标签，也可以书写变量
				{% endif %}
			if-else:
				{% if 条件 %}
					条件成立时执行
				{% else %}
					条件不成立时执行
				{% endif %}
			多重分支：
				{% if 条件1 %}
					
				{% elif 条件2 %}
				..
				{% else %}

				{% endif %}
		2）for语句
			{% for 变量 in 可迭代元素 %}
			
			{% endfor %}
			练习：
				完善数据，创建列表,在页面中显示
				"姓名：XXX，年龄：XX"
				[
					{
						"name":"",
						"age":30
					},
					{
						"name":"",
						"age":30
					},
					{
						"name":"",
						"age":30
					},
				]
			循环的内部变量：loop
				直接在循环内部使用，表示本次循环相关的信息
				常用属性：
					loop.index
						表示当前循环的次数，默认从1开始计
					loop.index0
						表示当前循环的次数，从0开始计
					loop.first
						表示是否为第一次循环，值为true表示第一次循环
					loop.last
						表示是否为最后一个循环
	5.静态文件
		1）不与服务器交互的文件都是静态文件（css,js,图片，音视频等）
		2）所有的静态文件都必须存储在一个名为"static"的文件夹下，Flask程序会自动查找
		3）静态文件的访问：必须使用"/static/子路径"访问
		4）url_for("视图函数名")实现反向解析路由：根据指定的视图函数返回对应的地址
		使用：
			# 根据视图函数解析对应的URL
			url_for("login") # "/login"
			# 反向解析带参数的路由，函数中接收多个参数
			url_for("login",uname="Maria",upwd="123"))
			# "/login/Maria/123"
			# 自动生成静态文件的路径
			# "/static/css/base.css"
			href="{{ url_for('static',filename="css/base.css")}}">
		练习：
			创建新的项目，名称Blog
			手动创建"templates"和"static"文件夹
			将博客项目中的html文件复制到templates中，
			所有的静态文件复制到static中
			注册路由，访问首页和列表页
			处理静态文件的访问路径（ctrl+F,ctrl+R）
	6.模板的继承
		（与类的继承相似）
		如果两个页面中大部分内容与结构都一致，可以采用模板继承
		实现：
			1）父模板：
				指定可以被子模板重写的内容
				{% block 块名 %}
					<h1>父模板</h1>
				{% endblock %}
			2）子模板中继承父模板
				{% extends "父模板名称"%}
			3）子模板中可以重写父模板中指定块的内容
				{% block 块名 %}
					<h1>子模板</h1>
				{% endblock %}

				



		
		






				
				
			





	










	