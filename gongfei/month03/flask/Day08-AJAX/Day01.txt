1.关系映射
	1.一对一映射
		1.一对一约束
			属性 = db.Column(
				db.TYPE,
				db.ForeignKey("主键表.主键"),
				unique=True
			)
		2.关联属性
			属性 = db.relationship(
				"关联的实体类",
				backref="反向引用关系属性名",
				uselist=False
			)
	2.多对多关系
		1.创建第三个关联类/表
			class XXX(db.Model):
				id = db.Column()
				外键1 = db.Column(xxx)
				外键2 = db.Column(xxx)
		2.关联属性 和 反向引用关系属性
			属性名 = db.relationship(
				"关联类名",
				secondary="第三张关联表名",
				lazy="dynamic",
				backref=db.backref(
					"反向引用关系属性名",
					lazy="dynamic"
				)
			)
=============================================
1.cookies & session
	1.cookies
		1.什么是cookies
			cookie 是一种数据存储的手段
			将一段文本保存在浏览器上的一种手段,并可以长时间保存
		2.使用场合
			1.记住密码
			2.记录用户的操作习惯，行为，关键词
		3.cookie特点
			1.长时间保存
			2.明文
			3.可以通过浏览器修改
			4.有浏览器之分
			5.cookie有网站之分
		4.Flask中使用cookies
			1.保存数据到cookies中
				通过响应对象将数据保存进cookies中
				1.响应对象的构建
					1.重定向就是响应对象
						resp = redirect("/xxx")
					2.通过make_response()将字符串构建成响应对象
						from flask import make_response
						resp = make_response("" 或 render_template())
				2.保存cookie的语法
					响应对象.set_cookie(key,value,max_age)
						key:保存到cookie中的数据的名称
						value:保存到cookie中的数据的值
						max_age:最大的存活时长,以秒为单位
				3.获取cookies的值
					通过 request.cookies 获取所有的cookies值
					request.cookies 的类型是 dict
				4.删除cookie的值
					响应对象.delete_cookie('key')
	2.session
		1.什么是session
			session - 会话
			当浏览器打开时，跟一个服务器交互的过程就是一次会话
			session 的目的:为了保存会话中所涉及到的一些信息

		2.session在Flask中的实现
			1.配置 SECRET_KEY
				app.config['SECRET_KEY'] = "123456"
			2.使用session
				from flask import session

				1.向session中保存数据
					session['key'] = value
				2.从session中获取数据
					value = session['key']
					value = session.get('key')
				3.删除session中的数据
					del session['key']
		3.session PK cookie
			1.cookie
				1.保存在客户端[位置]
				2.因为是明文,可以修改,安全性较低[安全]
				3.长久保存[时长]
			2.session
				1.保存在服务器上[位置]
				2.安全性较高[安全]
				3.临时存储[时长]
2.AJAX
	1.什么是AJAX
		Asynchronous Javascript And Xml (阿贾克斯)
		异步的       JS         和  xml

		通过 JS 异步的向服务器发送请求并接收响应,响应的数据是XML/JSON格式的

		同步访问:
			当客户端浏览器向服务器发送请求时,服务器在处理的过程中,浏览器只能等待
		异步访问:
			当客户端浏览器向服务器发送请求时,服务器在处理的过程中,浏览器可以做其他操作,无需一直等待

		AJAX优点:
			1.异步 访问
			2.局部 刷新

		使用场合:
			1.搜索建议
			2.表单验证
			3.前后端完全分离
				(SPA) Single Page Application
	2.AJAX核心对象 - 异步对象
		1.异步对象 - XMLHttpRequest
			由JS提供
			简称为 xhr
			代替浏览器向服务器端发送异步的请求并接收响应
		2.创建异步对象
			1.主流的异步对象是XMLHttpRequest类型的(IE7+,Chrome,Firefox,Safari,Opera)全部支持
			2.IE低版本(IE7以及以下)不支持XMLHttpRequest，需要使用 ActiveXObject() 来创建异步对象

			判断浏览器的支持性:
			if(window.XMLHttpRequest){
				alert("支持xhr");
			}else{
				alert("支持ActiveXObject");
			}


			创建XMLHttpRequest:
				var xhr = new XMLHttpRequest();
			创建ActiveXObject:
				var xhr = new ActiveXObject("Micorsoft.XMLHTTP");

			练习:
				1.创建 common.js
				2.声明一个函数 - createXhr()
				3.在函数中根据浏览器的支持性创建对应的异步对象，并返回




