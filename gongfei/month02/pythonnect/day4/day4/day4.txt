前情回顾

1. http协议响应
   
	 响应格式 ：  	响应行   HTTP/1.1  200  OK
	              	响应头   描述响应信息
			空行
			响应体   具体数据
	 
	 http server ： * 接收浏览器http请求
	                * 查看请求内容
			* 将固定网页返回给客户端

2. IO 分类

  【1】 阻塞IO：是默认的IO行为，效率低

  【2】 非阻塞IO：设置非阻塞行为，超时检测
	      	setblocking()
	 	settimeout()

  【3】 IO多路复用： 同时监控多个IO，处理发生的IO
        
		select(rlist,wlist,xlist)

3. 位运算 ： &  |   ^   <<    >>

***************************************************
一. 基于poll方法的IO多路复用

  	1.  p = select.poll()

	    	功能 ： 创建poll对象
	    	返回值： poll对象
	
	2.  p.register(fd,event)

	    	功能: 注册关注的IO
		参数：fd  要关注的IO
		event  关注IO的事件类型
						  
		常用事件 ： POLLIN  读IO   （rlist）
			    POLLOUT 写IO   （wlist）
			    POLLERR 异常IO （xlist）
			    POLLHUP 断开连接

	    e.g.  p.register(sockfd, POLLIN|POLLERR)
	    
  	3. p.unregister(fd)

	   	功能: 取消对IO的关注
		参数：IO对象或者IO对象的fileno
  
	4. events = p.poll()

	   	功能：阻塞等待监控的IO事件发生
		返回值：就绪的IO事件
		events 格式：[(fileno,event),(),...]

     * 需要通过fileno寻找对应的IO对象，以操作IO事件。建立字典作为查找地图：{fileno:io_obj}

	
二. epoll 实现IO多路复用

    使用方法：  基本与poll相同
		* 生成对象改为epoll()
		* 将所有事件类型改为EPOLL事件
		
    epoll特点： 
		* epoll 效率比select  poll要高
		* epoll 可以同时监控的IO数量比select  poll多
		* epoll 的触发方式更多 (EPOLLET边缘触发)

三. struct 模块使用

  1. 原理 ： 将一组简单数据进行打包，转换为bytes格式发送，或者将一组bytes个数数据转换为python数据类型

  2. 接口使用

	【1】st = Struct(fmt)

			功能： 生成结构化对象
			参数： fmt 定制的数据结构
              
		e.g.  要组织的数据  1   b'lisi'  1.75
				fmt : 'i4sf'
     
	【2】 st.pack(v1,...)

			功能： 将一组数据按照指定格式打包转换
			参数： 要打包的数据
			返回值： bytes字节串
		 
	【3】 st.unpack(bytes_data)

		      	功能： 将bytes字节串按照格式解析
			参数： bytes字节串
			返回值： 解析后的数据元组
	
    	【4】 struct.pack(fmt,v1,...)

	      struct.unpack(fmt,bytes_data)

	      说明 ：可以使用struct模块直接调用pack，unpack，第一个参数直接传入fmt

练习 ： 从客户端输入学生的id 姓名 年龄 成绩，打包发送给服务端，服务端将其存入一个数据表中。


四. 本地套接字

  	1. 功能 ： 本地两个程序之间的数据交换

	2. 通信原理：对一个内存对象进行读写操作，完成两个程序间的数据交互

	3. 创建本地套接字
	   
		 【1】 创建本地套接字：
		    sockfd = socket(AF_UNIX,SOCK_STREAM)
			
		 【2】 绑定套接字文件
		    sockfd.bind(file)
			
		 【3】 监听，连接，收发消息
		     listen  accept    recv/send


五. 多任务并发编程

   	 1. 意义： 充分利用计算机资源，同时处理多个任务，提高程序的运行效率

	 2. 并行和并发
	   
		 并行：多个任务利用计算机多核资源在同时执行，此时多个任务间是并行关系
		 
		 并发：同时处理多个任务，内核在任务间不断的切换达到很多任务都被同时处理的效果，
			实际每个时刻只有一个任务在被执行。
	 
	 3. 实现方法：多进程，多线程


六. 进程 （process）

   	 1. 定义： 程序在计算机中的一次运行过程 
	    
			* 程序是一个可执行的文件，是静态的只占磁盘
			* 进程是一个动态的过程，占有计算机运行资源，有一定的生命周期
	 
	 2. 如何产生一个进程

     		【1】 用户空间通过命令或者接口发起请求
		【2】 操作系统接收请求，开始调用系统接口创建进程
		【3】 操作系统调配计算机硬件资源，整合进程状态等进程创建工作
		【4】 操作系统将创建的进程提供给用户使用
	
	3. 进程概念
	  
		* cpu时间片：如果一个进程占有cpu则称这个进程在cpu时间片上

		* PCB(进程控制块)：在内存中开辟的一块空间，用于存放进程信息，也用于操作系统对进程的调配

		* 进程ID（PID）：系统为每个进程分配的一个大于0的整数，作为进程的ID标志

		  	命令 ： ps  -aux
    
		* 父子进程：系统中每一个进程（除了初始进程）都有唯一的父进程，可以有0个或者多个子进程
		  
			命令 ： pstree
			        ps  -ajx
		
		* 进程状态
		  
			三态： 
			  	就绪态： 进程具备执行条件，等待分配cpu资源
				运行态： 进程占有cpu时间片正在运行
				阻塞态： 进程处理阻塞暂停状态，让出cpu
      
			五态 （增加新建和终止）：

			  	新建：创建进程获取资源
				终止：进程结束释放资源

面试要求： 1. 什么是并行和并发
	   2. 什么是进程，进程是如何创建出来的
	   3. 进程有哪些状态，如何转换

作业： 1. 总结回顾网络编程内容

          * 代码整理
	  * 重点代码理解

       2. 复习 类的使用

